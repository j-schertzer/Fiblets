// --------------------------------------------------------------------------
// This file is part of the reference implementation for the paper
//    Fiblets for Real-Time Rendering of Massive Brain Tractograms.
//    J. Schertzer, C. Mercier, S. Rousseau and T. Boubekeur
//    Computer Graphics Forum 2022
//    DOI: 10.1111/cgf.14486
//
// All rights reserved. Use of this source code is governed by a
// MIT license that can be found in the LICENSE file.
// --------------------------------------------------------------------------

/* implementation of fiblet decompression using subgroups functions
(-38% decompression time compared to (deprecated) shared memory implementation)
more info at : 
- https://github.com/KhronosGroup/GLSL/blob/master/extensions/khr/GL_KHR_shader_subgroup.txt
- https://slideplayer.com/slide/15695814/
*/
#extension GL_NV_shader_thread_group : require
#extension GL_NV_mesh_shader : require
#extension GL_NV_gpu_shader5 : enable
#extension GL_NV_shader_thread_shuffle : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#extension GL_KHR_shader_subgroup_ballot : enable

#pragma optionNV (unroll all)
//NB_PTS_PER_BLOCK must be dividible by 2 and <=62
#if ((NB_PTS_PER_BLOCK + 16) % 4 == 0)
	#define PACK_SIZE (NB_PTS_PER_BLOCK + 16)
#else
	#define PACK_SIZE ((NB_PTS_PER_BLOCK + 16) + (4 - (NB_PTS_PER_BLOCK + 16) % 4))
#endif


#define LAST_THREAD (NB_PTS_PER_BLOCK/2) //will be 30 if NB_PTS_PER_BLOCK=60
#define GROUP_SIZE 32

layout(local_size_x=GROUP_SIZE) in;
layout(max_vertices=NB_PTS_PER_BLOCK+1, max_primitives=NB_PTS_PER_BLOCK) out;
layout(lines) out;

taskNV in Task {
  uint      baseID;
  uint8_t   subIDs[32];
} IN;

out PerVertexData
{
	uint fid;
	uint packedTan;
} v_out[];

#define ratio (data1.z)
#define stepsize (data3.w)
layout(binding = 1, shared) uniform UBO_STATIC
{
	vec4 data0;//xy=m_sizeZtestViewPort.xy, zw=2.0/(m_sizeFBO.xy-1.0)
	vec4 data1;//x = guardBand, y = angularCorrection, z = ratio, w = scaling
	vec4 data2;//x = unused, y = tesselationGain, z = colormode & backgroundflag, w = m_sizeSubsampledZBuffers.x
	vec4 data3;//xyz = frustrum test constants, w = stepsize
	vec4 sliders;//x = percent of fiber drawn, y = selected fiber Radius size, z = alpha selected fiber, w = size of selection
};

layout(binding = 2, shared) uniform UBO_DYNAMIC
{
	mat4 projCam;
	mat4 ZFilterinvCamProjMultTexShift;
	mat4 ProjMultCurrentPoseMultInvPreviousProjPoseMultTexShift;
	mat4 projCamMultMV;
	mat4 ModelViewCam;
	mat4 ModelViewOccluder;

	mat4 projSpec;
	mat4 invProjSpec;
	mat4 ModelViewSpec;
	mat4 projSpecMultMV;

	mat4 lights;//4xvec4(xLight,yLigth,zLight,1.0) in specCamSpace
};

	#if (SPECTATOR_MODE==0)
		#define PROJ_MAT (projCamMultMV)
	#else
		#define PROJ_MAT (projSpecMultMV)
	#endif

struct pack
{
	uint data[PACK_SIZE / 4];
};

layout(std430, binding = 2)readonly buffer blockSSBO
{
	pack listOfPoints[];
	//data[0] = first.x, first.y
	//data[1] = first.z, second.x
	//data[2] = second.y, second.z
	//data[3] = FiberID
	//data[4] = state(2bits), number of compressed points(6bits) -  block ID (1 byte) - 2 first points (2 bytes)
	//data[5 - 19] = 60 compressedPoints
};





/////////////////
const uint ID = IN.baseID + uint(IN.subIDs[gl_WorkGroupID.x]);
const uint fiD = listOfPoints[ID].data[3];


struct TransformRepr
{
	mat2x3 Rot; 
};
TransformRepr swapData[4];// 4 slots

void shuffleRepr(in uint inID,in uint outID,in uint index,in uint width)
{
	barrier();
	swapData[outID].Rot[0] = shuffleNV(swapData[inID].Rot[0],index,width);
	swapData[outID].Rot[1] = shuffleNV(swapData[inID].Rot[1],index,width);
}
void shuffleDownRepr(in uint inID,in uint outID,uint index,in uint width)
{
		swapData[outID].Rot[0] = shuffleDownNV(swapData[inID].Rot[0],index,width);
		swapData[outID].Rot[1] = shuffleDownNV(swapData[inID].Rot[1],index,width);
}
void shuffleUpRepr(in uint inID,in uint outID,in uint index,in uint width)
{
		swapData[outID].Rot[0] = shuffleUpNV(swapData[inID].Rot[0],index,width);
		swapData[outID].Rot[1] = shuffleUpNV(swapData[inID].Rot[1],index,width);
}


void multRepr(in uint leftID,in uint RightID,in uint WriteID)
{

	swapData[WriteID].Rot = mat3(swapData[leftID].Rot[0],swapData[leftID].Rot[1],cross(swapData[leftID].Rot[0],swapData[leftID].Rot[1]))*swapData[RightID].Rot;

}


void copyReprTo0(in uint ReadID)
{
	swapData[0].Rot= swapData[ReadID].Rot;
}


vec3 GetPointTanfromRepr(in uint ReadID)
{
	return swapData[ReadID].Rot[0];
}

void InitRepr(in mat2x3 axis) 
{
	swapData[0].Rot[0] = axis[0];
	swapData[0].Rot[1] = normalize(cross(swapData[0].Rot[0],C));
	swapData[1].Rot[0] = axis[1];
	swapData[1].Rot[1] = normalize(cross(swapData[1].Rot[0],C));
	multRepr(0,1,1);
}



/////////////////////////////////////////////
float mapToSnorm(uint val);
vec3 unquantize(in uint point);
vec3 uniformMappingAxisX(in vec3 v);
mat2x3 getAxisFromSSBO(in uint TID);
void main(void)
{
	int localID = int(gl_LocalInvocationID.x);//current thread ID from 0 to 31
	//thread 0 processes point 0 which is associated to a matrix obtained in a different way compared to other points
	//thread 0 writes metadata
	//thread i calculates point 2i, 2i+1
	//threads 30 is similar to thread 0 if each block is 60 points
	
	uint nbPtPack = (listOfPoints[ID].data[4] >> 24);// & 0x3f;
	const uint notEnd = uint((nbPtPack & 0x40)!=0);
	const uint notBegin =  uint((nbPtPack & 0x80)!=0);
	const uint mask = 0x40*notEnd + 0x80*notBegin;
	nbPtPack = (nbPtPack & 0x3f) + notEnd;//nb segments
	if (localID == 0) //one thread writes the number of primitives
		gl_PrimitiveCountNV = min(nbPtPack, nbPtPack - 1);// nbPtPack - 1;


	mat2x3 translate0;
	mat2x3 axis = mat2x3(0.0);
	if (localID < LAST_THREAD)
	{
		axis = getAxisFromSSBO(localID);
	}
	if (localID == (nbPtPack>>1))//for last tangent
	{
		axis[nbPtPack&0x01] = vec3(1.0,0.0,0.0);
	}

	if (localID == 0 || localID == LAST_THREAD)
	{
		uint beginID = uint(localID!=0);
		uint currentID = ID + beginID;
		const vec2 a = unpackUnorm2x16(listOfPoints[currentID].data[0]);
		const vec2 b = unpackUnorm2x16(listOfPoints[currentID].data[1]);
		const vec2 c = unpackUnorm2x16(listOfPoints[currentID].data[2]);
		translate0[0] = vec3(a.x, a.y, b.x);
		translate0[1] = vec3(b.y, c.x, c.y);
		axis[0] = normalize(translate0[1] - translate0[0]);
	}
	if ((localID==LAST_THREAD) && (nbPtPack==NB_PTS_PER_BLOCK+1))
	{
		gl_MeshVerticesNV[NB_PTS_PER_BLOCK].gl_Position = PROJ_MAT *vec4(translate0[0], 1.0);
		v_out[NB_PTS_PER_BLOCK].fid = fiD;
		v_out[NB_PTS_PER_BLOCK].packedTan = packSnorm4x8(vec4(axis[0],mapToSnorm(mask + NB_PTS_PER_BLOCK)));
	}

	InitRepr(axis);//Pass 0 filling swap[0] and swap[1] in repr
	//////////////////////////////////Pass1
	shuffleRepr(1,2,0,2);
	shuffleDownRepr(0,3,1,2);
	int parity = int(localID)%2;
    uint computeIndice = uint(3-2*parity);//3 or 1
    multRepr(2,computeIndice,computeIndice);
    shuffleUpRepr(3,2,1,2);
    copyReprTo0(2*parity);
	//////////////////////////////////Pass2
	shuffleRepr(1,2,1,4);
	shuffleDownRepr(0,3,2,4);
	parity = int(localID>>1)%2;
    computeIndice = uint(3-2*parity);//3 or 1
    multRepr(2,computeIndice,computeIndice);
    shuffleUpRepr(3,2,2,4);
    copyReprTo0(2*parity);
	//////////////////////////////////Pass3
	shuffleRepr(1,2,3,8);
	shuffleDownRepr(0,3,4,8);
	parity = int(localID>>2)%2;
    computeIndice = uint(3-2*parity);//3 or 1
    multRepr(2,computeIndice,computeIndice);
    shuffleUpRepr(3,2,4,8);
    copyReprTo0(2*parity);
	//////////////////////////////////Pass4
	shuffleRepr(1,2,7,16);
	shuffleDownRepr(0,3,8,16);
	parity = int(localID>>3)%2;
    computeIndice = uint(3-2*parity);//3 or 1
    multRepr(2,computeIndice,computeIndice);
    shuffleUpRepr(3,2,8,16);
    copyReprTo0(2*parity);
	//////////////////////////////////Pass5
	shuffleRepr(1,2,15,32);
	shuffleDownRepr(0,3,16,32);
	parity = int(localID>>4)%2;
    computeIndice = uint(3-2*parity);//3 or 1
    multRepr(2,computeIndice,computeIndice);
    shuffleUpRepr(3,2,16,32);
    copyReprTo0(2*parity);
    ///////////////////////////////// translation prefix sum
    if (localID<LAST_THREAD)
    {
	axis[0] = GetPointTanfromRepr(0);
	axis[1] = GetPointTanfromRepr(1);
	}
	vec3 globalT = subgroupBroadcastFirst(translate0[0]);
	translate0[0] = axis[0]+axis[1];

	translate0[0] = subgroupExclusiveAdd(translate0[0]);
	translate0[0] = translate0[0]*stepsize + globalT; 
	translate0[1] = translate0[0] + stepsize*axis[0];

    /////////////////////////////////Mesh fill

	const uint LocalID2 = localID<<1; 
	const uint LocalID2n = LocalID2+1; 
    const uint LocalID4 = localID<<2; 

	if (localID<LAST_THREAD)
	{
	gl_PrimitiveIndicesNV[LocalID4] = LocalID2;
	gl_PrimitiveIndicesNV[LocalID4 + 1] = LocalID2n;
 	gl_PrimitiveIndicesNV[LocalID4 + 2] = LocalID2n;
	gl_PrimitiveIndicesNV[LocalID4 + 3] = LocalID2 + 2;
		gl_MeshVerticesNV[LocalID2].gl_Position = PROJ_MAT * vec4(translate0[0], 1.0);
		v_out[LocalID2].fid = fiD;
		v_out[LocalID2].packedTan = packSnorm4x8(vec4(axis[0],mapToSnorm(mask + LocalID2)));
		gl_MeshVerticesNV[LocalID2n].gl_Position = PROJ_MAT * vec4(translate0[1], 1.0);
		v_out[LocalID2n].fid = fiD;
		v_out[LocalID2n].packedTan = packSnorm4x8(vec4(axis[1],mapToSnorm(mask + LocalID2n)));
	}
}


float mapToSnorm(uint val)
{
	return float(val)/127.0-1.0;
}

vec3 unquantize(in uint point)
{
	const float qsize = 16.0;

	float q2 = float(point & 0x0f) / (qsize-1.0f)*2.0f-1.0f;
	float q1 = float(point>>4) / (qsize-1.0f)*2.0f-1.0f;

	vec3 dir;
	dir.y = (q1 + q2)*0.5f;
	dir.z = (q1 - q2)*0.5f;
	dir.x = 1.0f - abs(dir.y) - abs(dir.z);

	return normalize(dir);
}

vec3 uniformMappingAxisX(in vec3 v)
{
	//v has been normalized previously
	vec3 ret;
	ret.x = mix(1.0,v.x,ratio);
	ret.yz = v.yz * sqrt((1.00000001-ret.x*ret.x)/(1.00000001-v.x*v.x));
	return ret;
}
//2 FMA, 1 DIV, 1 MIX, 1 SQRT, 2 MULT

mat2x3 getAxisFromSSBO(in uint TID)
{
	//gets the uncompressed axis of point 2xTID and 2xTID+1
	mat2x3 axis;

	uint id = TID * 2 +17;
	uint block = id>>2;
	uint current32bitsVal = listOfPoints[ID].data[block];
	uint decalage = ((id&0x03)^0x03)<<3;
	const uint point1 = (current32bitsVal >> decalage) & 0xff;
	id = TID * 2 +18;
	block = id>>2;
	current32bitsVal = listOfPoints[ID].data[block];
	decalage = ((id&0x03)^0x03)<<3;//0 or 16
	const uint point2 = (current32bitsVal >> decalage) & 0xff;
	axis[0] = uniformMappingAxisX(unquantize(point1));
	axis[1] = uniformMappingAxisX(unquantize(point2));
	return axis;
}