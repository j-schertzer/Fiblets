// --------------------------------------------------------------------------
// Source code provided FOR REVIEW ONLY, as part of the submission entitled
// "Fiblets for Real-Time Rendering of Massive Brain Tractograms".
//
// A proper version of this code will be released if the paper is accepted
// with the proper licence, documentation and bug fix.
// Currently, this material has to be considered confidential and shall not
// be used outside the review process.
//
// All right reserved. The Authors
// --------------------------------------------------------------------------

#extension GL_NV_mesh_shader : require //Mesh shader extension
#extension GL_NV_gpu_shader5 : enable //uint8_t
#extension GL_KHR_shader_subgroup_ballot : enable //ballot functions

#if ((NB_PTS_PER_BLOCK + 16) % 4 == 0)
	#define PACK_SIZE (NB_PTS_PER_BLOCK + 16)
#else
	#define PACK_SIZE ((NB_PTS_PER_BLOCK + 16) + (4 - (NB_PTS_PER_BLOCK + 16) % 4))
#endif

#define GROUP_SIZE 32

layout(local_size_x=GROUP_SIZE) in;

taskNV out Task {
  uint      baseID;
  uint8_t   subIDs[32];
} OUT;

layout (binding = 6) uniform sampler2D zDepthTestTex;//r = depth


#define ratio (data1.z)
layout(binding = 1, shared) uniform UBO_STATIC
{
	vec4 data0;//xy=m_sizeZtestViewPort.xy, zw=2.0/(m_sizeFBO.xy-1.0)
	vec4 data1;//x = guardBand, y = angularCorrection, z = ratio, w = scaling
	vec4 data2;//x = unused, y = tesselationGain, z = colormode & backgroundflag, w = m_sizeSubsampledZBuffers.x
	vec4 data3;//xyz = frustrum test constants, w = stepsize
	vec4 sliders;//x = percent of fiber drawn, y = selected fiber Radius size, z = alpha selected fiber, w = size of selection
};

layout(binding = 2, shared) uniform UBO_DYNAMIC
{
	mat4 projCam;
	mat4 ZFilterinvCamProjMultTexShift;
	mat4 ProjMultCurrentPoseMultInvPreviousProjPoseMultTexShift;
	mat4 projCamMultMV;
	mat4 ModelViewCam;
	mat4 ModelViewOccluder;

	mat4 projSpec;
	mat4 invProjSpec;
	mat4 ModelViewSpec;
	mat4 projSpecMultMV;

	mat4 lights;//4xvec4(xLight,yLigth,zLight,1.0) in specCamSpace
};


struct pack
{
	uint data[PACK_SIZE / 4];
};

layout(std430, binding = 2)readonly buffer blockSSBO
{
	pack listOfPoints[];
	//data[0] = first.x, first.y
	//data[1] = first.z, second.x
	//data[2] = second.y, second.z
	//data[3] = FiberID
	//data[4] = state(2bits), number of compressed points(6bits) -  block ID (1 byte) - 2 first points (2 bytes)
	//data[5 - 19] = 60 compressedPoints
};

layout(std430, binding = 3)readonly buffer colorSSBO
{
    uint criterion[];
};
uint getCriterionfromFiberID(uint fid);

const uint dataz2 = floatBitsToUint(data2.z);
const uint minCritCull = (dataz2)>>24;
const uint maxCritCull = ((dataz2)>>16)&0xff;


float rejectFiber(const in vec3 pt, const uint fid);
void main(void)
{
	uint ID = gl_WorkGroupID.x*GROUP_SIZE + gl_LocalInvocationID.x;

	//Decompression
	vec2 a = unpackUnorm2x16(listOfPoints[ID].data[0]);
	vec2 b = unpackUnorm2x16(listOfPoints[ID].data[1]);
	bool fiberEnd = ((listOfPoints[ID].data[4] >> 24)&0x40)==0;
	vec3 decompressedValue = vec3(a.x, a.y, b.x);
	float criterion = rejectFiber(decompressedValue, ID);

// next point
	a = unpackUnorm2x16(listOfPoints[ID+1].data[0]);
	b = unpackUnorm2x16(listOfPoints[ID+1].data[1]);
	decompressedValue = vec3(a.x, a.y, b.x);
	bool renderCurrent = criterion>0.0;
	bool renderNext = (rejectFiber(decompressedValue, ID)>0.0);	

	uint crit = getCriterionfromFiberID(listOfPoints[ID].data[3]) ;
	bool critRender = ( crit >= minCritCull ) && ( crit <= maxCritCull ); 

	bool render = renderCurrent && (fiberEnd || renderNext ) && critRender;

//	bool render = renderCurrent;
#if GROUP_SIZE > 1
	uvec4 vote  = subgroupBallot(render);
	uint  tasks = subgroupBallotBitCount(vote);
	if (gl_LocalInvocationID.x == 0)
	{
		// write the number of surviving meshlets, i.e.
		// mesh workgroups to spawn
		gl_TaskCountNV = tasks;
		// where the meshletIDs started from for this task workgroup
		OUT.baseID = gl_WorkGroupID.x * GROUP_SIZE;
	}
	// write which children survived into a compact array
	  uint idxOffset = subgroupBallotExclusiveBitCount(vote);
	if (render)
	{
		#if (AGGRESSIVE_OPTIM == 1)
		OUT.subIDs[idxOffset] = uint8_t(gl_LocalInvocationID.x) + uint8_t(0x80 * uint(criterion<RENDER_SINGLE_SEGMENT_RATIO));
		//disabling compression in that case
		#else
		OUT.subIDs[idxOffset] = uint8_t(gl_LocalInvocationID.x);
		#endif
	}
#else
	gl_TaskCountNV = uint(render);
	OUT.baseID = gl_WorkGroupID.x * GROUP_SIZE ;

#endif


}


bool testInGuardFrustrum(const in vec4 v)
{
	float s = v.x/(v.w+data3.x);
	bool ret  = (-1.0< s) && (s < 1.0);
	s = v.y/(v.w+data3.y);
	return ret && (-1.0< s) && (s < 1.0) && (v.w>data3.z);
}

bool testRenderZmask(const in vec4 v)
{
	vec3 p = v.xyz/v.w*0.5+0.5;// in [0,1]
	vec3 zm = textureLod(zDepthTestTex,p.xy,0).xyz;//.x=ZB .y = ZOB .z = ZOF

	#if (MESH_CUT_TEST == 1)
		#if (OCCLUDER_CULL_OUTSIDE==1)
			return (p.z<zm.x) && ( (p.z<zm.y) && (p.z>zm.z) );
		#else
			return (p.z<zm.x) && ( (p.z>zm.y) || (p.z<zm.z) );
		#endif
	#else
		return (p.z<zm.x);
	#endif

}

uint getCriterionfromFiberID(uint fid)
{
    uint gid = fid>>2;
    uint lid = (fid%4)<<3;
    return (criterion[gid]>>lid)%256;
}

float rejectFiber(const in vec3 pt, const uint fid)
{
	vec4 ptest = projCamMultMV * vec4(pt,1.0);
	if (testInGuardFrustrum(ptest)==false)
		return -1.0;
	if (testRenderZmask(ptest)==false)
		return -1.0;

	float tessL = clamp(data2.y/max(0.00001,ptest.w-data1.x),0.0,1.0);

	#if (AGGRESSIVE_OPTIM == 1)
	//we delete 900/1000 of fibers if tessL = 0.0 (asymptotic case)
	uint threshold = uint(mix(900.0,0.0,2.0*tessL/RENDER_SINGLE_SEGMENT_RATIO));

	if ((fid%1000) < threshold)
		return -1.0;
	#endif

	return tessL;
}
